
// This file has been generated by the GUI designer. Do not modify.
public partial class MainWindow
{
	private global::Gtk.Fixed fixed3;
	private global::Gtk.CheckButton cbIgnoreCase;
	private global::Gtk.Entry entry3;
	private global::Gtk.ScrolledWindow GtkScrolledWindow;
	private global::Gtk.TextView textview1;
	private global::Gtk.Expander expander1;
	private global::Gtk.ScrolledWindow GtkScrolledWindow1;
	private global::Gtk.TextView textview2;
	private global::Gtk.Label GtkLabel1;
	private global::Gtk.Label label1;
	private global::Gtk.Entry fileRegex;

	protected virtual void Build ()
	{
		global::Stetic.Gui.Initialize (this);
		// Widget MainWindow
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString ("MainWindow");
		this.WindowPosition = ((global::Gtk.WindowPosition)(4));
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.fixed3 = new global::Gtk.Fixed ();
		this.fixed3.Name = "fixed3";
		this.fixed3.HasWindow = false;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.cbIgnoreCase = new global::Gtk.CheckButton ();
		this.cbIgnoreCase.CanFocus = true;
		this.cbIgnoreCase.Name = "cbIgnoreCase";
		this.cbIgnoreCase.Label = global::Mono.Unix.Catalog.GetString ("ignore case");
		this.cbIgnoreCase.DrawIndicator = true;
		this.cbIgnoreCase.UseUnderline = true;
		this.fixed3.Add (this.cbIgnoreCase);
		global::Gtk.Fixed.FixedChild w1 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.cbIgnoreCase]));
		w1.X = 16;
		w1.Y = 67;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.entry3 = new global::Gtk.Entry ();
		this.entry3.WidthRequest = 1000;
		this.entry3.CanFocus = true;
		this.entry3.Name = "entry3";
		this.entry3.IsEditable = true;
		this.entry3.InvisibleChar = '•';
		this.fixed3.Add (this.entry3);
		global::Gtk.Fixed.FixedChild w2 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.entry3]));
		w2.X = 10;
		w2.Y = 11;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
		this.GtkScrolledWindow.WidthRequest = 1000;
		this.GtkScrolledWindow.HeightRequest = 300;
		this.GtkScrolledWindow.Name = "GtkScrolledWindow";
		this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
		this.textview1 = new global::Gtk.TextView ();
		this.textview1.CanFocus = true;
		this.textview1.Name = "textview1";
		this.GtkScrolledWindow.Add (this.textview1);
		this.fixed3.Add (this.GtkScrolledWindow);
		global::Gtk.Fixed.FixedChild w4 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.GtkScrolledWindow]));
		w4.X = 9;
		w4.Y = 117;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.expander1 = new global::Gtk.Expander (null);
		this.expander1.WidthRequest = 1000;
		this.expander1.CanFocus = true;
		this.expander1.Name = "expander1";
		this.expander1.Expanded = true;
		// Container child expander1.Gtk.Container+ContainerChild
		this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
		this.GtkScrolledWindow1.HeightRequest = 300;
		this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
		this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
		this.textview2 = new global::Gtk.TextView ();
		this.textview2.Buffer.Text = "Usage: ag [OPTIONS] PATTERN [PATH]\n\n  Recursively search for PATTERN in PATH.\n  Like grep or ack, but faster.\n\nExample:\n  ag -i foo /bar/\n\nOutput Options:\n     --ackmate            Print results in AckMate-parseable format\n  -A --after [LINES]      Print lines before match (Default: 2)\n  -B --before [LINES]     Print lines after match (Default: 2)\n     --[no]break          Print newlines between matches in different files\n                          (Enabled by default)\n     --[no]color          Print color codes in results (Enabled by default)\n     --color-line-number  Color codes for line numbers (Default: 1;33)\n     --color-match        Color codes for result match numbers (Default: 30;43)\n     --color-path         Color codes for path names (Default: 1;32)\n     --column             Print column numbers in results\n     --[no]heading\n     --line-numbers       Print line numbers even for streams\n  -C --context [LINES]    Print lines before and after matches (Default: 2)\n     --[no]group          Same as --[no]break --[no]heading\n  -g PATTERN              Print filenames matching PATTERN\n  -l --files-with-matches Only print filenames that contain matches\n                          (don't print the matching lines)\n  -L --files-without-matches\n                          Only print filenames that don't contain matches\n     --no-numbers         Don't print line numbers\n     --print-long-lines   Print matches on very long lines (Default: >2k characters)\n     --stats              Print stats (files scanned, time taken, etc.)\n\nSearch Options:\n  -a --all-types          Search all files (doesn't include hidden files\n                          or patterns from ignore files)\n  -D --debug              Ridiculous debugging (probably not useful)\n     --depth NUM          Search up to NUM directories deep (Default: 25)\n  -f --follow             Follow symlinks\n  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN\n     --hidden             Search hidden files (obeys .*ignore files)\n  -i --ignore-case        Match case insensitively\n     --ignore PATTERN     Ignore files/directories matching PATTERN\n                          (literal file/directory names also allowed)\n     --ignore-dir NAME    Alias for --ignore for compatibility with ack.\n  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)\n  -p --path-to-agignore STRING\n                          Use .agignore file at STRING\n  -Q --literal            Don't parse PATTERN as a regular expression\n  -s --case-sensitive     Match case sensitively (Enabled by default)\n  -S --smart-case         Match case insensitively unless PATTERN contains\n                          uppercase characters\n     --search-binary      Search binary files for matches\n  -t --all-text           Search all text files (doesn't include hidden files)\n  -u --unrestricted       Search all files (ignore .agignore, .gitignore, etc.;\n                          searches binary and hidden files as well)\n  -U --skip-vcs-ignores   Ignore VCS ignore files\n                          (.gitignore, .hgignore, .svnignore; still obey .agignore)\n  -v --invert-match\n  -w --word-regexp        Only match whole words\n  -z --search-zip         Search contents of compressed (e.g., gzip) files\n";
		this.textview2.CanFocus = true;
		this.textview2.Name = "textview2";
		this.GtkScrolledWindow1.Add (this.textview2);
		this.expander1.Add (this.GtkScrolledWindow1);
		this.GtkLabel1 = new global::Gtk.Label ();
		this.GtkLabel1.Name = "GtkLabel1";
		this.GtkLabel1.LabelProp = global::Mono.Unix.Catalog.GetString ("GtkExpander");
		this.GtkLabel1.UseUnderline = true;
		this.expander1.LabelWidget = this.GtkLabel1;
		this.fixed3.Add (this.expander1);
		global::Gtk.Fixed.FixedChild w7 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.expander1]));
		w7.X = 2;
		w7.Y = 431;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.label1 = new global::Gtk.Label ();
		this.label1.Name = "label1";
		this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Filename regex");
		this.fixed3.Add (this.label1);
		global::Gtk.Fixed.FixedChild w8 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.label1]));
		w8.X = 323;
		w8.Y = 47;
		// Container child fixed3.Gtk.Fixed+FixedChild
		this.fileRegex = new global::Gtk.Entry ();
		this.fileRegex.WidthRequest = 400;
		this.fileRegex.CanFocus = true;
		this.fileRegex.Name = "fileRegex";
		this.fileRegex.IsEditable = true;
		this.fileRegex.InvisibleChar = '•';
		this.fixed3.Add (this.fileRegex);
		global::Gtk.Fixed.FixedChild w9 = ((global::Gtk.Fixed.FixedChild)(this.fixed3 [this.fileRegex]));
		w9.X = 432;
		w9.Y = 45;
		this.Add (this.fixed3);
		if ((this.Child != null)) {
			this.Child.ShowAll ();
		}
		this.DefaultWidth = 2732;
		this.DefaultHeight = 752;
		this.Show ();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.entry3.Activated += new global::System.EventHandler (this.OnEntry3Activated);
		this.fileRegex.Activated += new global::System.EventHandler (this.OnFileRegexActivated);
	}
}
